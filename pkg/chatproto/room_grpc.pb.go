// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/room.proto

package chatproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChatController_List_FullMethodName         = "/chatproto.ChatController/List"
	ChatController_ListMessages_FullMethodName = "/chatproto.ChatController/ListMessages"
	ChatController_Messages_FullMethodName     = "/chatproto.ChatController/Messages"
)

// ChatControllerClient is the client API for ChatController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatControllerClient interface {
	List(ctx context.Context, in *ListRoomsRequest, opts ...grpc.CallOption) (*ListRoomsResponse, error)
	ListMessages(ctx context.Context, in *ListMessagesServerRequest, opts ...grpc.CallOption) (*ListMessagesServerResponse, error)
	Messages(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MessagesRequest, MessagesResponse], error)
}

type chatControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewChatControllerClient(cc grpc.ClientConnInterface) ChatControllerClient {
	return &chatControllerClient{cc}
}

func (c *chatControllerClient) List(ctx context.Context, in *ListRoomsRequest, opts ...grpc.CallOption) (*ListRoomsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRoomsResponse)
	err := c.cc.Invoke(ctx, ChatController_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatControllerClient) ListMessages(ctx context.Context, in *ListMessagesServerRequest, opts ...grpc.CallOption) (*ListMessagesServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMessagesServerResponse)
	err := c.cc.Invoke(ctx, ChatController_ListMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatControllerClient) Messages(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MessagesRequest, MessagesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatController_ServiceDesc.Streams[0], ChatController_Messages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MessagesRequest, MessagesResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatController_MessagesClient = grpc.BidiStreamingClient[MessagesRequest, MessagesResponse]

// ChatControllerServer is the server API for ChatController service.
// All implementations must embed UnimplementedChatControllerServer
// for forward compatibility.
type ChatControllerServer interface {
	List(context.Context, *ListRoomsRequest) (*ListRoomsResponse, error)
	ListMessages(context.Context, *ListMessagesServerRequest) (*ListMessagesServerResponse, error)
	Messages(grpc.BidiStreamingServer[MessagesRequest, MessagesResponse]) error
	mustEmbedUnimplementedChatControllerServer()
}

// UnimplementedChatControllerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChatControllerServer struct{}

func (UnimplementedChatControllerServer) List(context.Context, *ListRoomsRequest) (*ListRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedChatControllerServer) ListMessages(context.Context, *ListMessagesServerRequest) (*ListMessagesServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (UnimplementedChatControllerServer) Messages(grpc.BidiStreamingServer[MessagesRequest, MessagesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Messages not implemented")
}
func (UnimplementedChatControllerServer) mustEmbedUnimplementedChatControllerServer() {}
func (UnimplementedChatControllerServer) testEmbeddedByValue()                        {}

// UnsafeChatControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatControllerServer will
// result in compilation errors.
type UnsafeChatControllerServer interface {
	mustEmbedUnimplementedChatControllerServer()
}

func RegisterChatControllerServer(s grpc.ServiceRegistrar, srv ChatControllerServer) {
	// If the following call pancis, it indicates UnimplementedChatControllerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChatController_ServiceDesc, srv)
}

func _ChatController_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatControllerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatController_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatControllerServer).List(ctx, req.(*ListRoomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatController_ListMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessagesServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatControllerServer).ListMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatController_ListMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatControllerServer).ListMessages(ctx, req.(*ListMessagesServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatController_Messages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatControllerServer).Messages(&grpc.GenericServerStream[MessagesRequest, MessagesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChatController_MessagesServer = grpc.BidiStreamingServer[MessagesRequest, MessagesResponse]

// ChatController_ServiceDesc is the grpc.ServiceDesc for ChatController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chatproto.ChatController",
	HandlerType: (*ChatControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ChatController_List_Handler,
		},
		{
			MethodName: "ListMessages",
			Handler:    _ChatController_ListMessages_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Messages",
			Handler:       _ChatController_Messages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/room.proto",
}
